{{- /*
  vim:ft=bash.gotmpl:
*/ -}}
# Convert the template string to an array
PACKAGES_STR={{ .arch.pacman | join " " | quote }}
read -ra PACKAGES <<< "$PACKAGES_STR"

OUTPUT=$(yay -Q "${PACKAGES[@]}" 2>&1)

MISSING_PACKAGES=()

while IFS= read -r line; do
  if [[ "$line" == *"error: package"* ]]; then
    # Extract package name from error message (no 'local' outside function)
    pkg_name=$(echo "$line" | sed -n "s/error: package '\([^']*\)' was not found/\1/p")
    MISSING_PACKAGES+=("$pkg_name")  # Remove the $ before array name
  fi
done <<<"$OUTPUT"

if [[ ${#MISSING_PACKAGES[@]} -gt 0 ]]; then
  log_task "Installing packages: ${MISSING_PACKAGES[*]}"  # Use [*] for string expansion
  yay -S --noconfirm ${MISSING_PACKAGES[@]}
fi

# Install pipx packages
#
PIPX_PACKAGES={{ .arch.pipx | join " " | quote }}

missing_pipx_packages=()
pipx_list_output=$(pipx list)
for PACKAGE in $PIPX_PACKAGES; do
  if ! echo "$pipx_list_output" | grep -q "$PACKAGE"; then
    missing_pipx_packages+=("$PACKAGE")
  fi
done

if [[ ${#missing_pipx_packages[@]} -gt 0 ]]; then
  log_task "Installing missing pipx packages: ${missing_pipx_packages[*]}"
  for PACKAGE in "${missing_pipx_packages[@]}"; do
    pipx install "$PACKAGE"
  done
fi

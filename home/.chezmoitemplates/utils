# shellcheck shell=bash

set -euo pipefail

if [[ -n "${DOTFILES_DEBUG:-}" ]]; then
  set -x
fi

# Ensure entries are present in the PATH environment variable
# Adds entries to the beginning of PATH if they don't already exist
#
# Args:
#   $@ - One or more directory paths to add to PATH
#
# Example:
#   ensure_path_entry "/usr/local/bin" "$HOME/.local/bin"
function ensure_path_entry() {
  local entries=("$@")

  for entry in "${entries[@]}"; do
    if [[ ":${PATH}:" != *":${entry}:"* ]]; then
      export PATH="${entry}:${PATH}"
    fi
  done
}

function log_color() {
  local color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

function log_red() {
  log_color "0;31" "$@"
}

function log_blue() {
  log_color "0;34" "$@"
}

function log_green() {
  log_color "1;32" "$@"
}

function log_yellow() {
  log_color "1;33" "$@"
}

function log_task() {
  log_blue "🔃" "$@"
}

function log_manual_action() {
  log_red "⚠️" "$@"
}

function log_c() {
  log_yellow "👉" "$@"
}

function c() {
  log_c "$@"
  "$@"
}

function c_exec() {
  log_c "$@"
  exec "$@"
}

function log_error() {
  log_red "❌" "$@"
}

function log_info() {
  log_blue "ℹ️" "$@"
}

function error() {
  log_error "$@"
  exit 1
}

# Execute a command with root privileges using sudo if necessary
# If current user is root, executes command directly
# If not root, prompts for sudo password if needed
#
# Args:
#   exec: Optional first argument. If "exec", replaces current shell with command
#   $@: Command and its arguments to execute with root privileges
#
# Returns:
#   Returns the exit code of the executed command, or replaces shell if exec used
function sudo() {
  local exec=false
  if [[ "$1" == "exec" ]]; then
    shift
    exec=true
  fi

  # shellcheck disable=SC2312
  if [[ "$(id -u)" -eq 0 ]]; then
    if [[ "${exec}" == true ]]; then
      exec "$@"
    else
      "$@"
    fi
  else
    if ! command sudo --non-interactive true 2>/dev/null; then
      log_manual_action "Root privileges are required, please enter your password below"
      command sudo --validate
    fi
    if [[ "${exec}" == true ]]; then
      exec sudo "$@"
    else
      command sudo "$@"
    fi
  fi
}

# Check if a package is installed via apt package manager
# Args:
#   $1 - Package name to check
# Returns:
#   0 - If package is installed
#   1 - If package is not installed
function is_apt_package_installed() {
  local package="$1"

  apt list --quiet --quiet --installed "${package}" 2>/dev/null | grep --quiet .
}

# https://stackoverflow.com/a/53640320/12156188
# Check if a systemd service exists
# Args:
#   $1 - Service name without the .service suffix
# Returns:
#   0 - If service exists
#   1 - If service does not exist
function service_exists() {
  local n=$1
  if [[ $(systemctl list-units --all -t service --full --no-legend "${n}.service" | sed 's/^\s*//g' | cut -f1 -d' ') == ${n}.service ]]; then
    return 0
  else
    return 1
  fi
}

# Ultra-fast with enable --now (enable and start together)
function ensure_services_fast() {
    local services=("$@")
    local services_needing_action=()

    # Check if any service needs action (either not enabled or not active)
    for service in "${services[@]}"; do
        if ! systemctl is-enabled "$service" --quiet || ! systemctl is-active --quiet "$service"; then
            services_needing_action+=("$service")
        fi
    done

    # Use enable --now to both enable and start in one command
    if (( ${#services_needing_action[@]} > 0 )); then
        log_task "Enabling and starting services: ${services_needing_action[*]}"
        sudo systemctl enable --now "${services_needing_action[@]}"
    fi
}

# Function to ensure user is in specified group
function ensure_user_in_group_fast() {
    local username="$1"
    local group="$2"

    # Quick group existence check first
    if ! getent group "$group" >/dev/null 2>&1; then
        echo "Error: Group $group does not exist" >&2
        return 1
    fi

    # Fast membership check using getent
    if ! getent group "$group" | cut -d: -f4 | grep -qw "$username"; then
        log_task "Adding $username to $group group"
        sudo usermod -aG "$group" "$username"
    fi
}
